
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper function to check for admin role from Firestore
    function isAdmin() {
      return exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for product images
    match /product-images/{productId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }

    // Rules for category images
    match /category-images/{categoryId}/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }

    // Rules for user avatars
    match /avatars/{userId}/{allPaths=**} {
      allow read: if true;
      // Allow user to write to their own avatar folder
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for site assets like social preview images
    match /site-assets/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }

    // Rules for files shared with specific users
    match /userSharedFiles/{allPaths=**} {
      allow read: if true; // Public read access for links to work
      allow write: if request.auth != null && isAdmin(); // Only admins can create/update/delete
    }
  }
}
